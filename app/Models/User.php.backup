<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;
use Illuminate\Support\Facades\DB;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable, HasApiTokens, HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'phone',
        'password',
        'status',
        'nida_number',
        'full_name',
        'email',
        'location',
        'bio',
        'skills',
        'languages',
        'veta_certificate',
        'portfolio_images',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'password' => 'hashed',
            'skills' => 'array',
            'languages' => 'array',
            'portfolio_images' => 'array',
        ];
    }

    /**
     * Boot the model
     */
    // protected static function boot()
    // {
    //     parent::boot();
    //     
    //     // Automatically assign customer role to new users
    //     static::created(function ($user) {
    //         $user->assignRole('customer');
    //     });
    // }

    // /**
    //  * Get roles attribute for API serialization (Laravel-permission compatible)
    //  */
    // public function getRolesAttribute()
    // {
    //     try {
    //         return $this->getRoleNames()->toArray();
    //     } catch (Exception $e) {
    //         return [];
    //     }
    // }

    /**
     * Append roles to array when serializing
     */
    // protected $appends = ['roles'];

    /**
     * The roles property for Laravel-permission
     */
    protected $roles;

    // /**
    //  * Get user role IDs (Laravel-permission compatible)
    //  */
    // public function getRoleIds()
    // {
    //     return $this->roles->pluck('id')->toArray();
    // }

    /**
     * Check if user has a specific role by ID (Laravel-permission compatible)
     */
    public function hasRoleById($roleId)
    {
        $role = \Spatie\Permission\Models\Role::find($roleId);
        return $role ? $this->hasRole($role->name) : false;
    }

    // /**
    //  * Check if user has a specific role (custom implementation to avoid Laravel-permission issues)
    //  */
    // public function hasRole($role)
    // {
    //     $roleNames = $this->getRolesAttribute();
    //     return in_array($role, $roleNames);
    // }

    /**
     * Check if user has a specific permission by ID (Laravel-permission compatible)
     */
    public function hasPermissionById($permissionId)
    {
        $permission = \Spatie\Permission\Models\Permission::find($permissionId);
        return $permission ? $this->hasPermissionTo($permission->name) : false;
    }

    /**
     * Check if user has a specific permission (custom implementation to avoid Laravel-permission issues)
     */
    public function hasPermissionTo($permission)
    {
        try {
            return parent::hasPermissionTo($permission);
        } catch (Exception $e) {
            return false;
        }
    }

    /**
     * Assign a role to user by ID (Laravel-permission compatible)
     */
    public function assignRoleById($roleId)
    {
        $role = \Spatie\Permission\Models\Role::find($roleId);
        return $role ? $this->assignRole($role->name) : false;
    }

    /**
     * Assign a role to user (custom implementation to avoid Laravel-permission issues)
     */
    public function assignRole($role)
    {
        if (is_string($role)) {
            $roleModel = \Spatie\Permission\Models\Role::where('name', $role)->first();
            if ($roleModel) {
                // Check if user already has this role
                $hasRole = DB::table('model_has_roles')
                    ->where('model_id', $this->id)
                    ->where('model_type', 'App\\Models\\User')
                    ->where('role_id', $roleModel->id)
                    ->exists();
                
                if (!$hasRole) {
                    DB::table('model_has_roles')->insert([
                        'role_id' => $roleModel->id,
                        'model_type' => 'App\\Models\\User',
                        'model_id' => $this->id,
                    ]);
                }
                return $this;
            }
        }
        return $this;
    }

    /**
     * Promote user to fundi (Laravel-permission compatible)
     */
    public function promoteToFundi()
    {
        $this->assignRole('fundi');
        return $this;
    }

    /**
     * Promote user to admin (Laravel-permission compatible)
     */
    public function promoteToAdmin()
    {
        $this->assignRole('admin');
        return $this;
    }

    /**
     * Demote user to customer (Laravel-permission compatible)
     */
    public function demoteToCustomer()
    {
        $this->syncRoles(['customer']);
        return $this;
    }

    /**
     * Get the fundi profile associated with the user.
     */
    public function fundiProfile()
    {
        return $this->hasOne(FundiProfile::class);
    }

    /**
     * Get the fundi applications made by the user.
     */
    public function fundiApplications()
    {
        return $this->hasMany(FundiApplication::class);
    }

    /**
     * Get the jobs posted by the user (as customer).
     */
    public function jobs()
    {
        return $this->hasMany(Job::class, 'customer_id');
    }

    /**
     * Get the job applications made by the user (as fundi).
     */
    public function jobApplications()
    {
        return $this->hasMany(JobApplication::class, 'fundi_id');
    }

    /**
     * Get the portfolio items for the user (as fundi).
     */
    public function portfolio()
    {
        return $this->hasMany(Portfolio::class, 'fundi_id');
    }

    /**
     * Get the approved and visible portfolio items for the user (as fundi).
     */
    public function visiblePortfolio()
    {
        return $this->hasMany(Portfolio::class, 'fundi_id')
            ->where('status', 'approved')
            ->where('is_visible', true);
    }

    /**
     * Check if user can add more portfolio items (max 5)
     */
    public function canAddPortfolioItem(): bool
    {
        return $this->portfolio()->count() < 5;
    }

    /**
     * Get the number of portfolio items the user has
     */
    public function getPortfolioCount(): int
    {
        return $this->portfolio()->count();
    }

    /**
     * Get the number of visible portfolio items the user has
     */
    public function getVisiblePortfolioCount(): int
    {
        return $this->visiblePortfolio()->count();
    }

    /**
     * Get the payments made by the user.
     */
    public function payments()
    {
        return $this->hasMany(Payment::class);
    }

    /**
     * Get the notifications for the user.
     */
    public function notifications()
    {
        return $this->hasMany(Notification::class);
    }

    /**
     * Get the user sessions.
     */
    public function userSessions()
    {
        return $this->hasMany(UserSession::class);
    }

    /**
     * Get the ratings given to the user (as fundi).
     */
    public function ratingsReceived()
    {
        return $this->hasMany(RatingReview::class, 'fundi_id');
    }

    /**
     * Get the ratings given by the user (as customer).
     */
    public function ratingsGiven()
    {
        return $this->hasMany(RatingReview::class, 'customer_id');
    }

    /**
     * Check if user has multiple roles (customer + fundi, etc.)
     */
    public function hasMultipleRoles()
    {
        return $this->getRoleNames()->count() > 1;
    }

    /**
     * Check if user is a customer
     */
    public function isCustomer()
    {
        return $this->hasRole('customer');
    }

    /**
     * Check if user is a fundi
     */
    public function isFundi()
    {
        return $this->hasRole('fundi');
    }

    /**
     * Check if user is an admin
     */
    public function isAdmin()
    {
        return $this->hasRole('admin');
    }

    /**
     * Check if user can be promoted to fundi
     */
    public function canBecomeFundi()
    {
        return $this->isCustomer() && !$this->isFundi();
    }

    /**
     * Check if user can be promoted to admin
     */
    public function canBecomeAdmin()
    {
        return !$this->isAdmin();
    }

    /**
     * Get primary role (first role in the array)
     */
    public function getPrimaryRoleAttribute()
    {
        $roles = $this->getRoleNames();
        return $roles->first() ?? 'customer';
    }

    /**
     * Get role display name
     */
    public function getRoleDisplayNameAttribute()
    {
        $roleNames = $this->getRoleNames()->toArray();
        return implode(' + ', $roleNames);
    }

    /**
     * Get role description
     */
    public function getRoleDescriptionAttribute()
    {
        $descriptions = [];
        if ($this->isCustomer()) $descriptions[] = 'Can post jobs and hire fundis';
        if ($this->isFundi()) $descriptions[] = 'Can apply for jobs and provide services';
        if ($this->isAdmin()) $descriptions[] = 'Can manage the platform and users';
        
        return implode(' | ', $descriptions);
    }
}